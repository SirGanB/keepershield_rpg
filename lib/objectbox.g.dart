// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/ability_scores_collection.dart';
import 'models/character_model.dart';
import 'models/classe_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 1963882520613576514),
      name: 'AbilityScoresCollection',
      lastPropertyId: const obx_int.IdUid(1, 8948608465402224204),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8948608465402224204),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 8259666714863731140),
      name: 'CharacterModel',
      lastPropertyId: const obx_int.IdUid(12, 1964937715940948402),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8327608792326124552),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1562282177973208123),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4140737394114532060),
            name: 'race',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7034440663301788722),
            name: 'currentHealth',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4082990265445723949),
            name: 'maxHealth',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3999541886309340123),
            name: 'speed',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7472032465667776016),
            name: 'strength',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3516095175769080649),
            name: 'dexterity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4513704185553556262),
            name: 'constitution',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7509304936426371769),
            name: 'intelligence',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2455637448875294405),
            name: 'wisdom',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 1964937715940948402),
            name: 'charisma',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 6474753775249196188),
            name: 'classes',
            targetId: const obx_int.IdUid(4, 4642805264547309401))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 8801543994818437444),
      name: 'Charisma',
      lastPropertyId: const obx_int.IdUid(2, 494378801292448423),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 150662009245199988),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 494378801292448423),
            name: 'value',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 4642805264547309401),
      name: 'ClasseModel',
      lastPropertyId: const obx_int.IdUid(3, 5667722911350410565),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7219035457468796002),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4642985736208823664),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5667722911350410565),
            name: 'level',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 5460617520294082274),
      name: 'Constitution',
      lastPropertyId: const obx_int.IdUid(2, 4702360303126032932),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3646144379124172042),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4702360303126032932),
            name: 'value',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 3572628665639154884),
      name: 'Dexterity',
      lastPropertyId: const obx_int.IdUid(2, 2967673040901377500),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8759079076159616875),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2967673040901377500),
            name: 'value',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 663584836182773569),
      name: 'Intelligence',
      lastPropertyId: const obx_int.IdUid(2, 5136874382867810714),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1215939274134270802),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5136874382867810714),
            name: 'value',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 3527354931177756063),
      name: 'Strength',
      lastPropertyId: const obx_int.IdUid(2, 5547314170089507350),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 570708655969083781),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5547314170089507350),
            name: 'value',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 5142148247538147731),
      name: 'Wisdom',
      lastPropertyId: const obx_int.IdUid(2, 3043100442529788390),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3843042693650837827),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3043100442529788390),
            name: 'value',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(9, 5142148247538147731),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(1, 6474753775249196188),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    AbilityScoresCollection: obx_int.EntityDefinition<AbilityScoresCollection>(
        model: _entities[0],
        toOneRelations: (AbilityScoresCollection object) => [],
        toManyRelations: (AbilityScoresCollection object) => {},
        getId: (AbilityScoresCollection object) => object.id,
        setId: (AbilityScoresCollection object, int id) {
          object.id = id;
        },
        objectToFB: (AbilityScoresCollection object, fb.Builder fbb) {
          fbb.startTable(2);
          fbb.addInt64(0, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = AbilityScoresCollection(id: idParam);

          return object;
        }),
    CharacterModel: obx_int.EntityDefinition<CharacterModel>(
        model: _entities[1],
        toOneRelations: (CharacterModel object) => [],
        toManyRelations: (CharacterModel object) => {
              obx_int.RelInfo<CharacterModel>.toMany(1, object.id):
                  object.classes
            },
        getId: (CharacterModel object) => object.id,
        setId: (CharacterModel object, int id) {
          object.id = id;
        },
        objectToFB: (CharacterModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final raceOffset = fbb.writeString(object.race);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, raceOffset);
          fbb.addInt64(3, object.currentHealth);
          fbb.addInt64(4, object.maxHealth);
          fbb.addInt64(5, object.speed);
          fbb.addInt64(6, object.strength);
          fbb.addInt64(7, object.dexterity);
          fbb.addInt64(8, object.constitution);
          fbb.addInt64(9, object.intelligence);
          fbb.addInt64(10, object.wisdom);
          fbb.addInt64(11, object.charisma);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final raceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final currentHealthParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final maxHealthParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final speedParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final strengthParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final dexterityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final constitutionParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final intelligenceParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final wisdomParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final charismaParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final object = CharacterModel(
              id: idParam,
              name: nameParam,
              race: raceParam,
              currentHealth: currentHealthParam,
              maxHealth: maxHealthParam,
              speed: speedParam,
              strength: strengthParam,
              dexterity: dexterityParam,
              constitution: constitutionParam,
              intelligence: intelligenceParam,
              wisdom: wisdomParam,
              charisma: charismaParam);
          obx_int.InternalToManyAccess.setRelInfo<CharacterModel>(
              object.classes,
              store,
              obx_int.RelInfo<CharacterModel>.toMany(1, object.id));
          return object;
        }),
    Charisma: obx_int.EntityDefinition<Charisma>(
        model: _entities[2],
        toOneRelations: (Charisma object) => [],
        toManyRelations: (Charisma object) => {},
        getId: (Charisma object) => object.id,
        setId: (Charisma object, int id) {
          object.id = id;
        },
        objectToFB: (Charisma object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.value);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final valueParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object = Charisma(id: idParam, value: valueParam);

          return object;
        }),
    ClasseModel: obx_int.EntityDefinition<ClasseModel>(
        model: _entities[3],
        toOneRelations: (ClasseModel object) => [],
        toManyRelations: (ClasseModel object) => {},
        getId: (ClasseModel object) => object.id,
        setId: (ClasseModel object, int id) {
          object.id = id;
        },
        objectToFB: (ClasseModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.level);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final levelParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object =
              ClasseModel(id: idParam, name: nameParam, level: levelParam);

          return object;
        }),
    Constitution: obx_int.EntityDefinition<Constitution>(
        model: _entities[4],
        toOneRelations: (Constitution object) => [],
        toManyRelations: (Constitution object) => {},
        getId: (Constitution object) => object.id,
        setId: (Constitution object, int id) {
          object.id = id;
        },
        objectToFB: (Constitution object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.value);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final valueParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object = Constitution(id: idParam, value: valueParam);

          return object;
        }),
    Dexterity: obx_int.EntityDefinition<Dexterity>(
        model: _entities[5],
        toOneRelations: (Dexterity object) => [],
        toManyRelations: (Dexterity object) => {},
        getId: (Dexterity object) => object.id,
        setId: (Dexterity object, int id) {
          object.id = id;
        },
        objectToFB: (Dexterity object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.value);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final valueParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object = Dexterity(id: idParam, value: valueParam);

          return object;
        }),
    Intelligence: obx_int.EntityDefinition<Intelligence>(
        model: _entities[6],
        toOneRelations: (Intelligence object) => [],
        toManyRelations: (Intelligence object) => {},
        getId: (Intelligence object) => object.id,
        setId: (Intelligence object, int id) {
          object.id = id;
        },
        objectToFB: (Intelligence object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.value);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final valueParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object = Intelligence(id: idParam, value: valueParam);

          return object;
        }),
    Strength: obx_int.EntityDefinition<Strength>(
        model: _entities[7],
        toOneRelations: (Strength object) => [],
        toManyRelations: (Strength object) => {},
        getId: (Strength object) => object.id,
        setId: (Strength object, int id) {
          object.id = id;
        },
        objectToFB: (Strength object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.value);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final valueParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object = Strength(id: idParam, value: valueParam);

          return object;
        }),
    Wisdom: obx_int.EntityDefinition<Wisdom>(
        model: _entities[8],
        toOneRelations: (Wisdom object) => [],
        toManyRelations: (Wisdom object) => {},
        getId: (Wisdom object) => object.id,
        setId: (Wisdom object, int id) {
          object.id = id;
        },
        objectToFB: (Wisdom object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.value);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final valueParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object = Wisdom(id: idParam, value: valueParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AbilityScoresCollection] entity fields to define ObjectBox queries.
class AbilityScoresCollection_ {
  /// See [AbilityScoresCollection.id].
  static final id = obx.QueryIntegerProperty<AbilityScoresCollection>(
      _entities[0].properties[0]);
}

/// [CharacterModel] entity fields to define ObjectBox queries.
class CharacterModel_ {
  /// See [CharacterModel.id].
  static final id =
      obx.QueryIntegerProperty<CharacterModel>(_entities[1].properties[0]);

  /// See [CharacterModel.name].
  static final name =
      obx.QueryStringProperty<CharacterModel>(_entities[1].properties[1]);

  /// See [CharacterModel.race].
  static final race =
      obx.QueryStringProperty<CharacterModel>(_entities[1].properties[2]);

  /// See [CharacterModel.currentHealth].
  static final currentHealth =
      obx.QueryIntegerProperty<CharacterModel>(_entities[1].properties[3]);

  /// See [CharacterModel.maxHealth].
  static final maxHealth =
      obx.QueryIntegerProperty<CharacterModel>(_entities[1].properties[4]);

  /// See [CharacterModel.speed].
  static final speed =
      obx.QueryIntegerProperty<CharacterModel>(_entities[1].properties[5]);

  /// See [CharacterModel.strength].
  static final strength =
      obx.QueryIntegerProperty<CharacterModel>(_entities[1].properties[6]);

  /// See [CharacterModel.dexterity].
  static final dexterity =
      obx.QueryIntegerProperty<CharacterModel>(_entities[1].properties[7]);

  /// See [CharacterModel.constitution].
  static final constitution =
      obx.QueryIntegerProperty<CharacterModel>(_entities[1].properties[8]);

  /// See [CharacterModel.intelligence].
  static final intelligence =
      obx.QueryIntegerProperty<CharacterModel>(_entities[1].properties[9]);

  /// See [CharacterModel.wisdom].
  static final wisdom =
      obx.QueryIntegerProperty<CharacterModel>(_entities[1].properties[10]);

  /// See [CharacterModel.charisma].
  static final charisma =
      obx.QueryIntegerProperty<CharacterModel>(_entities[1].properties[11]);

  /// see [CharacterModel.classes]
  static final classes = obx.QueryRelationToMany<CharacterModel, ClasseModel>(
      _entities[1].relations[0]);
}

/// [Charisma] entity fields to define ObjectBox queries.
class Charisma_ {
  /// See [Charisma.id].
  static final id =
      obx.QueryIntegerProperty<Charisma>(_entities[2].properties[0]);

  /// See [Charisma.value].
  static final value =
      obx.QueryIntegerProperty<Charisma>(_entities[2].properties[1]);
}

/// [ClasseModel] entity fields to define ObjectBox queries.
class ClasseModel_ {
  /// See [ClasseModel.id].
  static final id =
      obx.QueryIntegerProperty<ClasseModel>(_entities[3].properties[0]);

  /// See [ClasseModel.name].
  static final name =
      obx.QueryStringProperty<ClasseModel>(_entities[3].properties[1]);

  /// See [ClasseModel.level].
  static final level =
      obx.QueryIntegerProperty<ClasseModel>(_entities[3].properties[2]);
}

/// [Constitution] entity fields to define ObjectBox queries.
class Constitution_ {
  /// See [Constitution.id].
  static final id =
      obx.QueryIntegerProperty<Constitution>(_entities[4].properties[0]);

  /// See [Constitution.value].
  static final value =
      obx.QueryIntegerProperty<Constitution>(_entities[4].properties[1]);
}

/// [Dexterity] entity fields to define ObjectBox queries.
class Dexterity_ {
  /// See [Dexterity.id].
  static final id =
      obx.QueryIntegerProperty<Dexterity>(_entities[5].properties[0]);

  /// See [Dexterity.value].
  static final value =
      obx.QueryIntegerProperty<Dexterity>(_entities[5].properties[1]);
}

/// [Intelligence] entity fields to define ObjectBox queries.
class Intelligence_ {
  /// See [Intelligence.id].
  static final id =
      obx.QueryIntegerProperty<Intelligence>(_entities[6].properties[0]);

  /// See [Intelligence.value].
  static final value =
      obx.QueryIntegerProperty<Intelligence>(_entities[6].properties[1]);
}

/// [Strength] entity fields to define ObjectBox queries.
class Strength_ {
  /// See [Strength.id].
  static final id =
      obx.QueryIntegerProperty<Strength>(_entities[7].properties[0]);

  /// See [Strength.value].
  static final value =
      obx.QueryIntegerProperty<Strength>(_entities[7].properties[1]);
}

/// [Wisdom] entity fields to define ObjectBox queries.
class Wisdom_ {
  /// See [Wisdom.id].
  static final id =
      obx.QueryIntegerProperty<Wisdom>(_entities[8].properties[0]);

  /// See [Wisdom.value].
  static final value =
      obx.QueryIntegerProperty<Wisdom>(_entities[8].properties[1]);
}
